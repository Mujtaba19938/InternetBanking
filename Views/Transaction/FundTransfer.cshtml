@model InternetBanking.Models.ViewModels.FundTransferViewModel
@{
    ViewData["Title"] = "Fund Transfer";
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h3 class="mb-0">💸 Fund Transfer</h3>
            </div>
            <div class="card-body">
                <form asp-action="FundTransfer" method="post" id="fundTransferForm">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    <div class="form-group mb-3">
                        <label for="FromAccountId" class="form-label">From Account</label>
                        <select asp-for="FromAccountId" class="form-select">
                            <option value="">Select Account</option>
                            @if (Model.FromAccounts != null)
                            {
                                @foreach (var account in Model.FromAccounts)
                                {
                                    <option value="@account.AccountId">
                                        @account.AccountNumber - @account.AccountType (Balance: $@account.Balance.ToString("N2"))
                                    </option>
                                }
                            }
                        </select>
                        <span asp-validation-for="FromAccountId" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="ToAccountNumber" class="form-label"></label>
                        <input asp-for="ToAccountNumber" class="form-control" placeholder="Enter recipient account number" />
                        <span asp-validation-for="ToAccountNumber" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Amount" class="form-label"></label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input asp-for="Amount" class="form-control" placeholder="0.00" step="0.01" />
                        </div>
                        <span asp-validation-for="Amount" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Description" class="form-label">Description (Optional)</label>
                        <textarea asp-for="Description" class="form-control" rows="3" placeholder="Enter transfer description"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-4">
                        <label asp-for="TransactionPassword" class="form-label"></label>
                        <input asp-for="TransactionPassword" class="form-control" placeholder="Enter your transaction password" />
                        <span asp-validation-for="TransactionPassword" class="text-danger"></span>
                        <small class="form-text text-muted">This is different from your login password</small>
                    </div>

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <a asp-controller="Home" asp-action="Dashboard" class="btn btn-secondary me-md-2">Cancel</a>
                        <button type="submit" class="btn btn-primary">Transfer Funds</button>
                    </div>
                </form>

                <div class="mt-4">
                    <div class="alert alert-warning">
                        <h6>⚠️ Important:</h6>
                        <small>
                            • Verify the recipient account number carefully<br>
                            • Ensure you have sufficient balance<br>
                            • Transaction password is required for security<br>
                            • All transfers are processed immediately
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    
    <script>
        $(document).ready(function() {
            let selectedAccount = null;
            
            // Store account data when account is selected
            $('#FromAccountId').change(function() {
                const accountId = $(this).val();
                if (accountId) {
                    const option = $(this).find('option:selected');
                    const balanceText = option.text().match(/Balance: \$([\d,]+\.?\d*)/);
                    if (balanceText) {
                        const balance = parseFloat(balanceText[1].replace(/,/g, ''));
                        selectedAccount = { id: accountId, balance: balance };
                        updateBalanceDisplay(balance);
                    }
                } else {
                    selectedAccount = null;
                    updateBalanceDisplay(0);
                }
            });
            
            // Update balance display
            function updateBalanceDisplay(balance) {
                const balanceElement = $('#balanceDisplay');
                if (balanceElement.length === 0) {
                    $('#FromAccountId').after('<div id="balanceDisplay" class="form-text text-info mb-2">Available Balance: $' + balance.toFixed(2) + '</div>');
                } else {
                    balanceElement.text('Available Balance: $' + balance.toFixed(2));
                }
            }
            
            // Validate amount against balance
            $('#Amount').on('input', function() {
                const amount = parseFloat($(this).val()) || 0;
                if (selectedAccount && amount > selectedAccount.balance) {
                    $(this).addClass('is-invalid');
                    if ($('#amountError').length === 0) {
                        $(this).after('<div id="amountError" class="invalid-feedback">Amount exceeds available balance</div>');
                    }
                } else {
                    $(this).removeClass('is-invalid');
                    $('#amountError').remove();
                }
            });
            
            // Form submission validation
            $('#fundTransferForm').submit(function(e) {
                const amount = parseFloat($('#Amount').val()) || 0;
                const toAccount = $('#ToAccountNumber').val().trim();
                
                if (!selectedAccount) {
                    e.preventDefault();
                    alert('Please select a source account.');
                    return false;
                }
                
                if (amount <= 0) {
                    e.preventDefault();
                    alert('Please enter a valid amount.');
                    return false;
                }
                
                if (amount > selectedAccount.balance) {
                    e.preventDefault();
                    alert('Insufficient balance for this transfer.');
                    return false;
                }
                
                if (!toAccount) {
                    e.preventDefault();
                    alert('Please enter recipient account number.');
                    return false;
                }
                
                // Show confirmation dialog
                const confirmMessage = `Confirm transfer of $${amount.toFixed(2)} from account ${selectedAccount.id} to ${toAccount}?`;
                if (!confirm(confirmMessage)) {
                    e.preventDefault();
                    return false;
                }
                
                // Disable submit button to prevent double submission
                $('button[type="submit"]').prop('disabled', true).text('Processing...');
            });
        });
    </script>
}
