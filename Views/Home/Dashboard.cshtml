@model IEnumerable<InternetBanking.Models.Account>
@{
    ViewData["Title"] = "Dashboard";
}

@Html.AntiForgeryToken()


<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Account Dashboard</h2>
    <div class="d-flex align-items-center">
        <div class="position-relative me-3">
            <button class="btn btn-outline-primary position-relative" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="notificationDropdown">
                🔔 Notifications
                @if (ViewBag.UnreadNotificationCount > 0)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        @ViewBag.UnreadNotificationCount
                    </span>
                }
            </button>
            <div class="dropdown-menu dropdown-menu-end" style="width: 350px; max-height: 400px; overflow-y: auto;">
                <div class="dropdown-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">Notifications</h6>
                    @if (ViewBag.UnreadNotificationCount > 0)
                    {
                        <button class="btn btn-sm btn-outline-secondary" onclick="markAllAsRead()">Mark All Read</button>
                    }
                </div>
                <div class="dropdown-divider"></div>
                @if (ViewBag.Notifications != null && ((IEnumerable<dynamic>)ViewBag.Notifications).Any())
                {
                    foreach (var notification in ViewBag.Notifications)
                    {
                        <div class="dropdown-item notification-item @(notification.IsRead ? "read" : "unread")" data-notification-id="@notification.NotificationId">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <h6 class="mb-1 @(notification.IsRead ? "text-muted" : "fw-bold")">@notification.Title</h6>
                                    <p class="mb-1 small">@notification.Message</p>
                                    <small class="text-muted">@notification.CreatedDate.ToString("MMM dd, yyyy HH:mm")</small>
                                </div>
                                @if (!notification.IsRead)
                                {
                                    <button class="btn btn-sm btn-outline-primary ms-2" onclick="markAsRead(@notification.NotificationId)">✓</button>
                                }
                            </div>
                        </div>
                        <div class="dropdown-divider"></div>
                    }
                }
                else
                {
                    <div class="dropdown-item text-center text-muted">
                        <small>No new notifications</small>
                    </div>
                }
            </div>
        </div>
        <div class="text-muted">
            <small>Last Login: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")</small>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function markAsRead(notificationId) {
            fetch('/Home/MarkNotificationAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ notificationId: notificationId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update UI
                    const notificationItem = document.querySelector(`[data-notification-id="${notificationId}"]`);
                    if (notificationItem) {
                        notificationItem.classList.remove('unread');
                        notificationItem.classList.add('read');
                        const markButton = notificationItem.querySelector('button');
                        if (markButton) {
                            markButton.remove();
                        }
                        const title = notificationItem.querySelector('h6');
                        if (title) {
                            title.classList.remove('fw-bold');
                            title.classList.add('text-muted');
                        }
                    }
                    
                    // Update badge count
                    updateNotificationBadge();
                }
            })
            .catch(error => console.error('Error:', error));
        }

        function markAllAsRead() {
            fetch('/Home/MarkAllNotificationsAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update all notifications to read
                    document.querySelectorAll('.notification-item').forEach(item => {
                        item.classList.remove('unread');
                        item.classList.add('read');
                        const markButton = item.querySelector('button');
                        if (markButton) {
                            markButton.remove();
                        }
                        const title = item.querySelector('h6');
                        if (title) {
                            title.classList.remove('fw-bold');
                            title.classList.add('text-muted');
                        }
                    });
                    
                    // Update badge count
                    updateNotificationBadge();
                }
            })
            .catch(error => console.error('Error:', error));
        }

        function updateNotificationBadge() {
            const unreadCount = document.querySelectorAll('.notification-item.unread').length;
            const badge = document.querySelector('.badge');
            if (badge) {
                if (unreadCount > 0) {
                    badge.textContent = unreadCount;
                    badge.style.display = 'inline';
                } else {
                    badge.style.display = 'none';
                }
            }
            
            // Update mark all button
            const markAllButton = document.querySelector('.dropdown-header button');
            if (markAllButton) {
                if (unreadCount > 0) {
                    markAllButton.style.display = 'inline-block';
                } else {
                    markAllButton.style.display = 'none';
                }
            }
        }
    </script>

    <!-- T-Pin Setup Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Show T-Pin setup modal if needed
            @if (TempData["ShowTPinSetup"] != null)
            {
                <text>
                var tpinModal = new bootstrap.Modal(document.getElementById('tpinSetupModal'));
                tpinModal.show();
                
                // Add event listener for when modal is closed
                document.getElementById('tpinSetupModal').addEventListener('hidden.bs.modal', function() {
                    // Check if T-Pin was successfully set
                    if (!window.tpinSetSuccessfully) {
                        showTPinWarning();
                    }
                });
                </text>
            }

            // Handle T-Pin setup form submission
            document.getElementById('saveTPinBtn').addEventListener('click', function() {
                var accountId = document.getElementById('tpinAccount').value;
                var password = document.getElementById('tpinPassword').value;
                var confirmPassword = document.getElementById('tpinConfirm').value;

                if (!accountId) {
                    alert('Please select an account.');
                    return;
                }

                if (!password || password.length < 4) {
                    alert('T-Pin must be at least 4 characters long.');
                    return;
                }

                if (password !== confirmPassword) {
                    alert('T-Pin and confirmation do not match.');
                    return;
                }

                // Send AJAX request to set T-Pin
                fetch('/Profile/ResetTransactionPassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: 'accountId=' + encodeURIComponent(accountId) + 
                          '&newPassword=' + encodeURIComponent(password) + 
                          '&confirmPassword=' + encodeURIComponent(confirmPassword)
                })
                .then(response => {
                    if (response.ok) {
                        // Mark T-Pin as successfully set
                        window.tpinSetSuccessfully = true;
                        // Close modal and reload page to show success message
                        var modal = bootstrap.Modal.getInstance(document.getElementById('tpinSetupModal'));
                        modal.hide();
                        window.location.reload();
                    } else {
                        alert('Failed to set T-Pin. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred. Please try again.');
                });
            });
        });

        // Function to show T-Pin warning popup
        function showTPinWarning() {
            // Create warning modal HTML
            var warningModalHtml = `
                <div class="modal fade" id="tpinWarningModal" tabindex="-1" aria-labelledby="tpinWarningModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header bg-danger text-white">
                                <h5 class="modal-title" id="tpinWarningModalLabel">⚠️ T-Pin Required</h5>
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-danger">
                                    <strong>⚠️ Important Warning!</strong><br><br>
                                    You have not set up your T-Pin yet. Without a T-Pin, you will not be able to perform any transactions including:
                                    <ul class="mt-2 mb-0">
                                        <li>Fund transfers</li>
                                        <li>Cash deposits</li>
                                        <li>Check deposits</li>
                                        <li>Wire transfers</li>
                                    </ul>
                                    <br>
                                    <strong>Please set up your T-Pin from your profile to use banking services.</strong>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" onclick="window.location.href='/Profile'">Go to Profile</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">I'll Do It Later</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Add modal to page
            document.body.insertAdjacentHTML('beforeend', warningModalHtml);
            
            // Show the warning modal
            var warningModal = new bootstrap.Modal(document.getElementById('tpinWarningModal'));
            warningModal.show();
        }
    </script>
}

<style>
    .notification-item {
        padding: 10px 15px;
        border: none;
        background: none;
        text-align: left;
        width: 100%;
        transition: background-color 0.2s;
    }

    .notification-item:hover {
        background-color: #f8f9fa;
    }

    .notification-item.unread {
        background-color: #e3f2fd;
        border-left: 3px solid #2196f3;
    }

    .notification-item.read {
        opacity: 0.7;
    }

    .dropdown-menu {
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        border: 1px solid rgba(0, 0, 0, 0.1);
    }

    .dropdown-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        padding: 10px 15px;
    }

    .dropdown-divider {
        margin: 0;
    }
</style>

<div class="row">
    @foreach (var account in Model)
    {
        <div class="col-md-6 col-lg-4 mb-4">
            <div class="card balance-card">
                <div class="card-body">
                    <h5 class="card-title">@account.AccountType Account</h5>
                    <p class="card-text">
                        <small>Account Number: @account.AccountNumber</small>
                    </p>
                    <h3 class="mb-3">$@account.Balance.ToString("N2")</h3>
                    <div class="d-grid gap-2">
                        <a asp-controller="Home" asp-action="AccountDetails" asp-route-accountId="@account.AccountId"
                           class="btn btn-light btn-sm">View Details</a>
                        <a asp-controller="Home" asp-action="TransactionHistory" asp-route-accountId="@account.AccountId"
                           class="btn btn-outline-light btn-sm">Transaction History</a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="row mt-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3 mb-2">
                        <a asp-controller="Transaction" asp-action="FundTransfer" class="btn btn-primary w-100">
                            💸 Fund Transfer
                        </a>
                    </div>
                    <div class="col-md-3 mb-2">
                        <a asp-controller="Service" asp-action="Index" class="btn btn-outline-primary w-100">
                            📋 Service Requests
                        </a>
                    </div>
                    <div class="col-md-3 mb-2">
                        <a asp-controller="Service" asp-action="MyRequests" class="btn btn-outline-primary w-100">
                            📄 My Requests
                        </a>
                    </div>
                    <div class="col-md-3 mb-2">
                        <a href="#" class="btn btn-outline-primary w-100">
                            ❓ Help & Support
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- T-Pin Setup Modal for New Users -->
@if (TempData["ShowTPinSetup"] != null)
{
    <div class="modal fade" id="tpinSetupModal" tabindex="-1" aria-labelledby="tpinSetupModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title" id="tpinSetupModalLabel">🔐 Set Your T-Pin</h5>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <strong>⚠️ Security Required!</strong><br>
                        You must set a Transaction Pin (T-Pin) to use banking services.
                    </div>
                    
                    <form id="tpinSetupForm">
                        <div class="mb-3">
                            <label for="tpinAccount" class="form-label">Select Account</label>
                            <select id="tpinAccount" class="form-select" required>
                                <option value="">Choose Account</option>
                                @foreach (var account in Model)
                                {
                                    <option value="@account.AccountId">@account.AccountNumber - @account.AccountType</option>
                                }
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="tpinPassword" class="form-label">Set T-Pin</label>
                            <input type="password" id="tpinPassword" class="form-control" required 
                                   placeholder="Enter T-Pin (minimum 4 characters)" minlength="4" />
                            <small class="form-text text-muted">This will be used for all transactions</small>
                        </div>
                        
                        <div class="mb-3">
                            <label for="tpinConfirm" class="form-label">Confirm T-Pin</label>
                            <input type="password" id="tpinConfirm" class="form-control" required 
                                   placeholder="Confirm your T-Pin" minlength="4" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning" id="saveTPinBtn">Set T-Pin</button>
                </div>
            </div>
        </div>
    </div>
}
